[{"E:\\ReactJS\\my-app\\src\\index.js":"1","E:\\ReactJS\\my-app\\src\\reportWebVitals.js":"2","E:\\ReactJS\\my-app\\src\\App.js":"3","E:\\ReactJS\\my-app\\src\\shared\\dishes.js":"4","E:\\ReactJS\\my-app\\src\\components\\Menucomponent.js":"5","E:\\ReactJS\\my-app\\src\\components\\DishdetailComponent.js":"6","E:\\ReactJS\\my-app\\src\\components\\MainComponent.js":"7","E:\\ReactJS\\my-app\\src\\components\\HeaderComponent.js":"8","E:\\ReactJS\\my-app\\src\\components\\FooterComponent.js":"9","E:\\ReactJS\\my-app\\src\\components\\HomeComponent.js":"10","E:\\ReactJS\\my-app\\src\\components\\ContactComponent.js":"11","E:\\ReactJS\\my-app\\src\\shared\\leaders.js":"12","E:\\ReactJS\\my-app\\src\\shared\\comments.js":"13","E:\\ReactJS\\my-app\\src\\shared\\promotions.js":"14","E:\\ReactJS\\my-app\\src\\components\\AboutComponent.js":"15","E:\\ReactJS\\my-app\\src\\redux\\configureStore.js":"16","E:\\ReactJS\\my-app\\src\\redux\\dishes.js":"17","E:\\ReactJS\\my-app\\src\\redux\\comments.js":"18","E:\\ReactJS\\my-app\\src\\redux\\promotions.js":"19","E:\\ReactJS\\my-app\\src\\redux\\leaders.js":"20","E:\\ReactJS\\my-app\\src\\redux\\ActionTypes.js":"21","E:\\ReactJS\\my-app\\src\\redux\\ActionCreators.js":"22","E:\\ReactJS\\my-app\\src\\components\\LoadingComponent.js":"23","E:\\ReactJS\\my-app\\src\\redux\\forms.js":"24","E:\\ReactJS\\my-app\\src\\shared\\baseUrl.js":"25"},{"size":639,"mtime":1608477587451,"results":"26","hashOfConfig":"27"},{"size":362,"mtime":1608221285642,"results":"28","hashOfConfig":"27"},{"size":504,"mtime":1608737316765,"results":"29","hashOfConfig":"27"},{"size":1490,"mtime":1608473886868,"results":"30","hashOfConfig":"31"},{"size":2017,"mtime":1610549902916,"results":"32","hashOfConfig":"27"},{"size":8552,"mtime":1610550271123,"results":"33","hashOfConfig":"27"},{"size":4717,"mtime":1610549718024,"results":"34","hashOfConfig":"27"},{"size":5055,"mtime":1608649858577,"results":"35","hashOfConfig":"27"},{"size":2637,"mtime":1608457596946,"results":"36","hashOfConfig":"27"},{"size":1847,"mtime":1610550334917,"results":"37","hashOfConfig":"27"},{"size":12026,"mtime":1610552144240,"results":"38","hashOfConfig":"27"},{"size":2382,"mtime":1608477735596,"results":"39","hashOfConfig":"31"},{"size":4280,"mtime":1608479237037,"results":"40","hashOfConfig":"31"},{"size":445,"mtime":1608477758219,"results":"41","hashOfConfig":"31"},{"size":4516,"mtime":1610549831871,"results":"42","hashOfConfig":"27"},{"size":791,"mtime":1610204765900,"results":"43","hashOfConfig":"27"},{"size":634,"mtime":1610199731862,"results":"44","hashOfConfig":"27"},{"size":637,"mtime":1610288095639,"results":"45","hashOfConfig":"27"},{"size":649,"mtime":1610267039033,"results":"46","hashOfConfig":"27"},{"size":630,"mtime":1610299512388,"results":"47","hashOfConfig":"27"},{"size":554,"mtime":1610299796720,"results":"48","hashOfConfig":"27"},{"size":6297,"mtime":1610549376791,"results":"49","hashOfConfig":"27"},{"size":256,"mtime":1610183993921,"results":"50","hashOfConfig":"27"},{"size":169,"mtime":1610204773035,"results":"51","hashOfConfig":"27"},{"size":48,"mtime":1610265324089,"results":"52","hashOfConfig":"27"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},"1dt6xs0",{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"117p687",{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"55"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"55"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"55"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},"E:\\ReactJS\\my-app\\src\\index.js",[],["109","110"],"E:\\ReactJS\\my-app\\src\\reportWebVitals.js",[],"E:\\ReactJS\\my-app\\src\\App.js",[],"E:\\ReactJS\\my-app\\src\\shared\\dishes.js",[],["111","112"],"E:\\ReactJS\\my-app\\src\\components\\Menucomponent.js",[],"E:\\ReactJS\\my-app\\src\\components\\DishdetailComponent.js",["113","114","115"],"import React from \"react\";\r\nimport {\r\n    Card,\r\n    CardImg,\r\n    CardText,\r\n    CardBody,\r\n    CardTitle,\r\n    Breadcrumb,\r\n    BreadcrumbItem,\r\n    Button,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    Row,\r\n    Col,\r\n    Label\r\n} from \"reactstrap\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {Control, LocalForm, Errors} from \"react-redux-form\";\r\nimport { Loading } from './LoadingComponent';\r\nimport { baseUrl } from '../shared/baseUrl';\r\nimport { FadeTransform, Fade, Stagger } from 'react-animation-components';\r\n\r\nfunction RenderDish({dish}) {\r\n    \r\n    if(dish != null) {\r\n        return (<div>\r\n             <FadeTransform\r\n                in\r\n                transformProps={{\r\n                    exitTransform: 'scale(0.5) translateY(-50%)'\r\n                }}>\r\n            <Card>\r\n            <CardImg top src={baseUrl + dish.image} alt={dish.name} />\r\n                <CardBody>\r\n                    <h4><CardTitle> {\r\n                        dish.name\r\n                    }</CardTitle></h4>\r\n                    <CardText> {\r\n                        dish.description\r\n                    }</CardText>\r\n                </CardBody>\r\n            </Card>\r\n            </FadeTransform>\r\n        </div>);\r\n    } else {\r\n        return <div></div>;\r\n    }\r\n}\r\n\r\nfunction RenderComments({comments, postComment, dishId}) {\r\n    if (comments == null) {\r\n        return <div></div>;\r\n    }\r\n    let comments_list = comments;\r\n    const cmnts =   comments_list.map(comment => {\r\n        return ( <Fade in><li key={\r\n            comment.id\r\n        }>\r\n            <p> {\r\n                comment.comment\r\n            }</p>\r\n            <p>\r\n                -- {\r\n                comment.author\r\n            }, &nbsp;{\" \"}\r\n                {\r\n                new Intl.DateTimeFormat(\"en-US\", {\r\n                    year: \"numeric\",\r\n                    month: \"long\",\r\n                    day: \"2-digit\"\r\n                }).format(new Date(comment.date))\r\n            }\r\n                {\" \"} </p>\r\n        </li> </Fade>);\r\n    });\r\n    return (<div>\r\n        <h4>Comments</h4>\r\n      \r\n        <ul className=\"list-unstyled\">\r\n        <Stagger in>\r\n             {cmnts}\r\n             </Stagger> \r\n             \r\n              </ul>\r\n    </div>);\r\n}\r\n\r\nconst DishDetail = props => {\r\n   \r\n    if (props.isLoading) {\r\n        return(\r\n            <div className=\"container\">\r\n                <div className=\"row\">            \r\n                    <Loading />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    else if (props.errMess) {\r\n        return(\r\n            <div className=\"container\">\r\n                <div className=\"row\">            \r\n                    <h4>{props.errMess}</h4>\r\n                </div>\r\n            </div>\r\n        );\r\n    } \r\n    else{\r\n        return (<div className=\"container\">\r\n        <div className=\"row\">\r\n            <Breadcrumb>\r\n                <BreadcrumbItem>\r\n                    <Link to=\"/menu\">Menu</Link>\r\n                </BreadcrumbItem>\r\n                <BreadcrumbItem active> {\r\n                    props.dish.name\r\n                }</BreadcrumbItem>\r\n            </Breadcrumb>\r\n            <div className=\"col-12\">\r\n                <h3> {\r\n                    props.dish.name\r\n                }</h3>\r\n                <hr/>\r\n            </div>\r\n        </div>\r\n        <div className=\"row\">\r\n            <div className=\"col-12 col-md-5 m-1\">\r\n                <RenderDish dish={\r\n                    props.dish\r\n                }/>\r\n            </div>\r\n            <div className=\"col-12 col-md-5 m-1\">\r\n                <RenderComments comments={\r\n                    props.comments\r\n                }/>\r\n                <CommentForm dishId={\r\n                        props.dish.id\r\n                    }\r\n                    postComment={\r\n                        props.postComment\r\n                    }/>\r\n            </div>\r\n        </div>\r\n    </div>);\r\n    }   \r\n   \r\n   \r\n   \r\n};\r\nconst maxLength = len => val => !val || val.length <= len;\r\nconst minLength = len => val => val && val.length >= len;\r\n\r\nclass CommentForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isModalOpen: false\r\n        };\r\n        this.toggleModal = this.toggleModal.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    toggleModal() {\r\n        this.setState({\r\n            isModalOpen: !this.state.isModalOpen\r\n        });\r\n    }\r\n\r\n    handleSubmit(values) { // console.log(\"Current State is: \" + JSON.stringify(values));\r\n        alert(\"Current State is: \" + JSON.stringify(values));\r\n        this.toggleModal();\r\n\r\n        this.props.postComment(this.props.dishId, values.rating, values.author, values.comment);\r\n    }\r\n\r\n    render() {\r\n        return (<div>\r\n            <Button outline\r\n                onClick={\r\n                    this.toggleModal\r\n            }>\r\n                <span className=\"fa fa-pencil\"></span>\r\n                Submit Comment\r\n            </Button>\r\n\r\n            <Modal isOpen={\r\n                    this.state.isModalOpen\r\n                }\r\n                toggle={\r\n                    this.toggleModal\r\n            }>\r\n                <ModalHeader toggle={\r\n                    this.toggleModal\r\n                }>Submit Comment</ModalHeader>\r\n                <ModalBody>\r\n                    <LocalForm onSubmit={\r\n                        values => this.handleSubmit(values)\r\n                    }>\r\n                        <Row className=\"form-group\">\r\n                            <Label htmlFor=\"rating\"\r\n                                md={2}>Rating</Label>\r\n                            <Col md={10}>\r\n                                <Control.select className=\"form-control\" defaultValue=\"1\" id=\"rating\" model=\".rating\" name=\"rating\">\r\n                                    <option value=\"1\">1</option>\r\n                                    <option value=\"2\">2</option>\r\n                                    <option value=\"3\">3</option>\r\n                                    <option value=\"4\">4</option>\r\n                                    <option value=\"5\">5</option>\r\n                                </Control.select>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"form-group\">\r\n                            <Label htmlFor=\"author\"\r\n                                md={2}>\r\n                                Your Name\r\n                            </Label>\r\n                            <Col md={10}>\r\n                                <Control.text model=\".author\" id=\"author\" name=\"author\" placeholder=\"Your Name\" className=\"form-control\"\r\n                                    validators={\r\n                                        {\r\n                                            minLength: minLength(3),\r\n                                            maxLength: maxLength(15)\r\n                                        }\r\n                                    }/>\r\n                                <Errors className=\"text-danger\" model=\".author\" show=\"touched\"\r\n                                    messages={\r\n                                        {\r\n                                            minLength: \"Must be greater than 2 characters\",\r\n                                            maxLength: \"Must be 15 characters or less\"\r\n                                        }\r\n                                    }/>\r\n                            </Col>\r\n                        </Row>\r\n\r\n                        <Row className=\"form-group\">\r\n                            <Label htmlFor=\"message\"\r\n                                md={2}>\r\n                                Comment\r\n                            </Label>\r\n                            <Col md={10}>\r\n                                <Control.textarea className=\"form-control\" id=\"comment\" model=\".comment\" name=\"comment\" rows=\"6\"/>\r\n                            </Col>\r\n                        </Row>\r\n\r\n                        <Row className=\"form-group\">\r\n                            <Col md={\r\n                                {size: 12}\r\n                            }>\r\n                                <Button color=\"primary\" value=\"submit\">\r\n                                    Submit\r\n                                </Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </LocalForm>\r\n                </ModalBody>\r\n            </Modal>\r\n        </div>);\r\n    }\r\n}\r\n\r\nexport default DishDetail;","E:\\ReactJS\\my-app\\src\\components\\MainComponent.js",["116"],"import React, { Component } from \"react\";\r\nimport Menu from \"./Menucomponent\";\r\nimport Header from \"./HeaderComponent\";\r\nimport Home from \"./HomeComponent\";\r\nimport Contact from \"./ContactComponent\";\r\nimport About from \"./AboutComponent\";\r\nimport Footer from \"./FooterComponent\";\r\nimport DishDetail from \"./DishdetailComponent\";\r\nimport {\r\n  postComment,\r\n  fetchDishes,\r\n  fetchComments,\r\n  fetchPromos,\r\n  fetchLeaders,\r\n  postFeedback\r\n} from \"../redux/ActionCreators\";\r\n\r\nimport { Switch, Route, Redirect, withRouter } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { actions } from \"react-redux-form\";\r\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  postComment: (dishId, rating, author, comment) =>\r\n    dispatch(postComment(dishId, rating, author, comment)),\r\n  postFeedback: (\r\n    firstname,\r\n    lastname,\r\n    telnum,\r\n    email,\r\n    agree,\r\n    contactType,\r\n    message\r\n  ) =>\r\n    dispatch(\r\n      postFeedback(\r\n        firstname,\r\n        lastname,\r\n        telnum,\r\n        email,\r\n        agree,\r\n        contactType,\r\n        message\r\n      )\r\n    ),\r\n  fetchDishes: () => {\r\n    dispatch(fetchDishes());\r\n  },\r\n  resetFeedbackForm: () => {\r\n    dispatch(actions.reset(\"feedback\"));\r\n  },\r\n  fetchComments: () => dispatch(fetchComments()),\r\n  fetchPromos: () => dispatch(fetchPromos()),\r\n  fetchLeaders: () => dispatch(fetchLeaders())\r\n});\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    dishes: state.dishes,\r\n    comments: state.comments,\r\n    promotions: state.promotions,\r\n    leaders: state.leaders\r\n  };\r\n};\r\n\r\nclass Main extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.fetchDishes();\r\n    this.props.fetchComments();\r\n    this.props.fetchPromos();\r\n    this.props.fetchLeaders();\r\n  }\r\n  onDishSelect(dishId) {\r\n    this.setState({ selectedDish: dishId });\r\n  }\r\n\r\n  render() {\r\n    const HomePage = () => {\r\n      return (\r\n        <Home\r\n          dish={this.props.dishes.dishes.filter(dish => dish.featured)[0]}\r\n          dishesLoading={this.props.dishes.isLoading}\r\n          dishErrMess={this.props.dishes.errMess}\r\n          promotion={\r\n            this.props.promotions.promotions.filter(promo => promo.featured)[0]\r\n          }\r\n          promoLoading={this.props.promotions.isLoading}\r\n          promoErrMess={this.props.promotions.errMess}\r\n          leader={\r\n            this.props.leaders.leaders.filter(leader => leader.featured)[0]\r\n          }\r\n          leaderLoading={this.props.leaders.isLoading}\r\n          leaderErrMess={this.props.leaders.errMess}\r\n        />\r\n      );\r\n    };\r\n\r\n    const DishWithId = ({ match }) => {\r\n      return (\r\n        <DishDetail\r\n          dish={\r\n            this.props.dishes.dishes.filter(\r\n              dish => dish.id === parseInt(match.params.dishId, 10)\r\n            )[0]\r\n          }\r\n          isLoading={this.props.dishes.isLoading}\r\n          errMess={this.props.dishes.errMess}\r\n          comments={this.props.comments.comments.filter(\r\n            comment => comment.dishId === parseInt(match.params.dishId, 10)\r\n          )}\r\n          postComment={this.props.postComment}\r\n        />\r\n      );\r\n    };\r\n    const AboutPage = () => {\r\n      return (\r\n        <About\r\n          leaders={this.props.leaders.leaders}\r\n          isLoading={this.props.leaders.isLoading}\r\n          errMess={this.props.leaders.errMess}\r\n        />\r\n      );\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <TransitionGroup>\r\n          <CSSTransition\r\n            key={this.props.location.key}\r\n            classNames=\"page\"\r\n            timeout={300}\r\n          >\r\n            <Switch location={this.props.location}>\r\n              <Route path=\"/home\" component={HomePage} />\r\n              <Route\r\n                exact\r\n                path=\"/menu\"\r\n                component={() => <Menu dishes={this.props.dishes} />}\r\n              />\r\n              <Route\r\n                exact\r\n                path=\"/contactus\"\r\n                component={() => (\r\n                  <Contact\r\n                    resetFeedbackForm={this.props.resetFeedbackForm}\r\n                    postFeedback={this.props.postFeedback}\r\n                  />\r\n                )}\r\n              />\r\n\r\n              <Route path=\"/aboutus\" component={AboutPage} />\r\n              <Route path=\"/menu/:dishId\" component={DishWithId} />\r\n              <Redirect to=\"/home\" />\r\n            </Switch>\r\n          </CSSTransition>\r\n        </TransitionGroup>\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Main));","E:\\ReactJS\\my-app\\src\\components\\HeaderComponent.js",[],"E:\\ReactJS\\my-app\\src\\components\\FooterComponent.js",[],"E:\\ReactJS\\my-app\\src\\components\\HomeComponent.js",[],"E:\\ReactJS\\my-app\\src\\components\\ContactComponent.js",["117","118","119","120","121","122","123"],"import React, {Component} from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {\r\n    Breadcrumb,\r\n    BreadcrumbItem,\r\n    Button,\r\n    Row,\r\n    Col,\r\n    Label\r\n} from 'reactstrap';\r\nimport { Control, Form, Errors } from 'react-redux-form';\r\n\r\n\r\nconst required = (val) => val && val.length;\r\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\r\nconst minLength = (len) => (val) => val && (val.length >= len);\r\nconst isNumber = (val) => !isNaN(Number(val));\r\nconst validEmail = (val) => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\r\n\r\nclass Contact extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleSubmit(values) {\r\n        console.log('Current State is: ' + JSON.stringify(values));\r\n        // alert('Current State is: ' + JSON.stringify(values));\r\n        this.props.resetFeedbackForm();\r\n        this.props.postFeedback(values.firstname,values.lastname,values.telnum,values.email,values.agree,values.contactType,values.message);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <Breadcrumb>\r\n                        <BreadcrumbItem>\r\n                            <Link to=\"/home\">Home</Link>\r\n                        </BreadcrumbItem>\r\n                        <BreadcrumbItem active>Contact Us</BreadcrumbItem>\r\n                    </Breadcrumb>\r\n                    <div className=\"col-12\">\r\n                        <h3>Contact Us</h3>\r\n                        <hr/>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"row row-content\">\r\n                    <div className=\"col-12\">\r\n                        <h3>Location Information</h3>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-4 offset-sm-1\">\r\n                        <h5>Our Address</h5>\r\n                        <address>\r\n                            121, Clear Water Bay Road\r\n                            <br/>\r\n                            Clear Water Bay, Kowloon\r\n                            <br/>\r\n                            HONG KONG\r\n                            <br/>\r\n                            <i className=\"fa fa-phone\"></i>: +852 1234 5678\r\n                            <br/>\r\n                            <i className=\"fa fa-fax\"></i>: +852 8765 4321\r\n                            <br/>\r\n                            <i className=\"fa fa-envelope\"></i>:{\" \"}\r\n                            <a href=\"mailto:confusion@food.net\">confusion@food.net</a>\r\n                        </address>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-6 offset-sm-1\">\r\n                        <h5>Map of our Location</h5>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-11 offset-sm-1\">\r\n                        <div className=\"btn-group\" role=\"group\">\r\n                        <Button className=\"btn btn-primary\">\r\n                                <span className=\"fa fa-phone\"> Call</span></Button>\r\n                                \r\n                           \r\n                            <Button className=\"btn btn-info\">\r\n                                <span className=\"fa fa-skype\"> Skype</span></Button>\r\n                                \r\n                                <Button className=\"btn btn-success\">\r\n                                <span className=\"fa fa-envelope-o\"> Email</span></Button>\r\n                                \r\n                            \r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row row-content\">\r\n                    <div className=\"col-12\">\r\n                        <h3>Send us your Feedback</h3>\r\n                    </div>\r\n                    <div className=\"col-12 col-md-9\">\r\n                        <Form  model=\"feedback\" onSubmit={\r\n                            (values) => this.handleSubmit(values)\r\n                        }>\r\n\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"firstname\"\r\n                                    md={2}>First Name</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".firstname\" id=\"firstname\" name=\"firstname\" placeholder=\"First Name\" className=\"form-control\"\r\n                                        validators={\r\n                                            {\r\n                                                required,\r\n                                                minLength: minLength(3),\r\n                                                maxLength: maxLength(15)\r\n                                            }\r\n                                        }/>\r\n                                    <Errors className=\"text-danger\" model=\".firstname\" show=\"touched\"\r\n                                        messages={\r\n                                            {\r\n                                                required: 'Required',\r\n                                                minLength: 'Must be greater than 2 characters',\r\n                                                maxLength: 'Must be 15 characters or less'\r\n                                            }\r\n                                        }/>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"lastname\"\r\n                                    md={2}>Last Name</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".lastname\" id=\"lastname\" name=\"lastname\" placeholder=\"Last Name\" className=\"form-control\"\r\n                                        validators={\r\n                                            {\r\n                                                required,\r\n                                                minLength: minLength(3),\r\n                                                maxLength: maxLength(15)\r\n                                            }\r\n                                        }/>\r\n                                    <Errors className=\"text-danger\" model=\".lastname\" show=\"touched\"\r\n                                        messages={\r\n                                            {\r\n                                                required: 'Required',\r\n                                                minLength: 'Must be greater than 2 characters',\r\n                                                maxLength: 'Must be 15 characters or less'\r\n                                            }\r\n                                        }/>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"telnum\"\r\n                                    md={2}>Contact Tel.</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".telnum\" id=\"telnum\" name=\"telnum\" placeholder=\"Tel. Number\" className=\"form-control\"\r\n                                        validators={\r\n                                            {\r\n                                                required,\r\n                                                minLength: minLength(3),\r\n                                                maxLength: maxLength(15),\r\n                                                isNumber\r\n                                            }\r\n                                        }/>\r\n                                    <Errors className=\"text-danger\" model=\".telnum\" show=\"touched\"\r\n                                        messages={\r\n                                            {\r\n                                                required: 'Required',\r\n                                                minLength: 'Must be greater than 2 numbers',\r\n                                                maxLength: 'Must be 15 numbers or less',\r\n                                                isNumber: 'Must be a number'\r\n                                            }\r\n                                        }/>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"email\"\r\n                                    md={2}>Email</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".email\" id=\"email\" name=\"email\" placeholder=\"Email\" className=\"form-control\"\r\n                                        validators={\r\n                                            {required, validEmail}\r\n                                        }/>\r\n                                    <Errors className=\"text-danger\" model=\".email\" show=\"touched\"\r\n                                        messages={\r\n                                            {\r\n                                                required: 'Required',\r\n                                                validEmail: 'Invalid Email Address'\r\n                                            }\r\n                                        }/>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Col md={\r\n                                    {\r\n                                        size: 6,\r\n                                        offset: 2\r\n                                    }\r\n                                }>\r\n                                    <div className=\"form-check\">\r\n                                        <Label check>\r\n                                            <Control.checkbox className=\"form-check-input\" model=\".agree\" name=\"agree\"/> {' '}\r\n                                            <strong>May we contact you?</strong>\r\n                                        </Label>\r\n                                    </div>\r\n                                </Col>\r\n                                <Col md={\r\n                                    {\r\n                                        size: 3,\r\n                                        offset: 1\r\n                                    }\r\n                                }>\r\n                                    <Control.select className=\"form-control\" model=\".contactType\" name=\"contactType\">\r\n                                        <option>Tel.</option>\r\n                                        <option>Email</option>\r\n                                    </Control.select>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"message\"\r\n                                    md={2}>Your Feedback</Label>\r\n                                <Col md={10}>\r\n                                    <Control.textarea className=\"form-control\" id=\"message\" model=\".message\" name=\"message\" rows=\"12\"/>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Col md={\r\n                                    {\r\n                                        size: 10,\r\n                                        offset: 2\r\n                                    }\r\n                                }>\r\n                                    <Button color=\"primary\" type=\"submit\">\r\n                                        Send Feedback\r\n                                    </Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </Form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Contact;","E:\\ReactJS\\my-app\\src\\shared\\leaders.js",[],["124","125"],"E:\\ReactJS\\my-app\\src\\shared\\comments.js",[],"E:\\ReactJS\\my-app\\src\\shared\\promotions.js",[],"E:\\ReactJS\\my-app\\src\\components\\AboutComponent.js",[],"E:\\ReactJS\\my-app\\src\\redux\\configureStore.js",[],"E:\\ReactJS\\my-app\\src\\redux\\dishes.js",[],"E:\\ReactJS\\my-app\\src\\redux\\comments.js",[],"E:\\ReactJS\\my-app\\src\\redux\\promotions.js",[],"E:\\ReactJS\\my-app\\src\\redux\\leaders.js",[],"E:\\ReactJS\\my-app\\src\\redux\\ActionTypes.js",[],"E:\\ReactJS\\my-app\\src\\redux\\ActionCreators.js",[],"E:\\ReactJS\\my-app\\src\\components\\LoadingComponent.js",[],"E:\\ReactJS\\my-app\\src\\redux\\forms.js",[],"E:\\ReactJS\\my-app\\src\\shared\\baseUrl.js",[],{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","replacedBy":"129"},{"ruleId":"126","replacedBy":"130"},{"ruleId":"128","replacedBy":"131"},{"ruleId":"132","severity":1,"message":"133","line":204,"column":33,"nodeType":"134","endLine":204,"endColumn":133},{"ruleId":"132","severity":1,"message":"135","line":219,"column":33,"nodeType":"134","endLine":225,"endColumn":40},{"ruleId":"132","severity":1,"message":"136","line":242,"column":33,"nodeType":"134","endLine":242,"endColumn":131},{"ruleId":"137","severity":1,"message":"138","line":67,"column":3,"nodeType":"139","messageId":"140","endLine":69,"endColumn":4},{"ruleId":"132","severity":1,"message":"135","line":102,"column":37,"nodeType":"134","endLine":109,"endColumn":44},{"ruleId":"132","severity":1,"message":"135","line":124,"column":37,"nodeType":"134","endLine":131,"endColumn":44},{"ruleId":"132","severity":1,"message":"135","line":146,"column":37,"nodeType":"134","endLine":154,"endColumn":44},{"ruleId":"132","severity":1,"message":"135","line":170,"column":37,"nodeType":"134","endLine":173,"endColumn":44},{"ruleId":"132","severity":1,"message":"141","line":192,"column":45,"nodeType":"134","endLine":192,"endColumn":121},{"ruleId":"132","severity":1,"message":"133","line":203,"column":37,"nodeType":"134","endLine":203,"endColumn":118},{"ruleId":"132","severity":1,"message":"136","line":213,"column":37,"nodeType":"134","endLine":213,"endColumn":136},{"ruleId":"126","replacedBy":"142"},{"ruleId":"128","replacedBy":"143"},"no-native-reassign",["144"],"no-negated-in-lhs",["145"],["144"],["145"],"react/jsx-pascal-case","Imported JSX component select must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component text must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component textarea must be in PascalCase or SCREAMING_SNAKE_CASE","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","Imported JSX component checkbox must be in PascalCase or SCREAMING_SNAKE_CASE",["144"],["145"],"no-global-assign","no-unsafe-negation"]